---
- name: Playbook to configure a Ansible Automation Platform 2.x cluster
  hosts: localhost
  connection: local
  gather_facts: false
  collections:
    - ansible.controller
    - redhat_cop.controller_configuration

  vars:
    absent_present: "{{ state | default('present') }}"
    which_org: "{{ org_name }}"
    aap_hostname: 'trrel9pod.texasroadracing.com'

  pre_tasks:
    - name: "Include AAP host and credential info from vault"
      ansible.builtin.include_vars:
        file: "controller_vars/controller_vars.yml"
        
    - name: Get AAP version from API
      ansible.builtin.uri:
        url: "https://{{ controller_host }}/api/controller/v2/config/"
        force_basic_auth: true
        method: GET
        return_content: true
        url_password: "{{ controller_password }}"
        url_username: "{{ controller_username }}"
        validate_certs: "{{ controller_validate_certs }}"
      register: api_version

    - name: Set fact of AAP version returned from API
      ansible.builtin.set_fact:
        aap_version: "{{ api_version['json']['version'] }}"

    # - name: "Include variables from directory"
    #   ansible.builtin.include_vars:
    #     dir: "controller_vars/"
    #     extensions:
    #       - 'yml'
    #       - 'yaml'
    #       - 'json'
    
    # - name: 'Get token'
    #   ansible.controller.token:
    #     scope: 'write'
    #     state: 'present'

  tasks:
    # # - name: "Include task for managing LDAP settings"
    # #   ansible.builtin.include_role:
    # #     name: infra.controller_configuration.settings
    # #   when: controller_settings | length is not match('0')

    # - name: "Include task for managing LDAP settings"
    #   ansible.controller.settings:
    #     controller_oauthtoken: "{{ controller_token }}"
    #   when: controller_settings | length is not match('0')
    #   vars:
    #     settings: "{{ controller_settings }}"

    # - name: "Include task for managing instance groups"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.instance_groups
    #   when: controller_instance_groups | length is not match('0')

    # - name: "Include task for managing credential types"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.credential_types
    #   when: controller_credential_types | length is not match('0')

    # - name: "Include task for managing organizations"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.organizations
    #   vars:
    #     assign_galaxy_credentials_to_org: false
    #   when: controller_organizations | length is not match('0')

    # - name: "Include task for managing users"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.users
    #   when: controller_user_accounts | length is not match('0')

    # - name: "Include task for managing teams"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.teams
    #   when: controller_teams | length is not match('0')

    # - name: "Include task for managing credentials"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.credentials
    #   when: controller_credentials | length is not match('0')

    # # Add Orgs a second time to associate the Galaxy / Automation Hub credentials with the Org for project sync
    # - name: "Include task for managing organizations to associate Hub credentials"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.organizations
    #   vars:
    #     assign_galaxy_credentials_to_org: true
    #   when: controller_organizations | length is not match('0')

    # - name: "Include task for manging execution environments"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.execution_environments
    #   when: controller_execution_environments | length is not match('0')

    # - name: "Include task for managing projects"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.projects
    #   when: controller_projects | length is not match('0')

    # - name: "Include task for managing labels"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.labels
    #   when: controller_labels | length is not match('0')

    # - name: "Include task for managing inventories"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.inventories
    #   when: controller_inventories | length is not match('0')

    # - name: "Include task for managing inventory sources"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.inventory_sources
    #   when: controller_inventory_sources | length is not match('0')

    # - name: "Include task for managing hosts"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.hosts
    #   when: controller_hosts | length is not match('0')

    # - name: "Include task for managing groups"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.groups
    #   when: controller_groups | length is not match('0')

    # - name: "Include task for managing notification templates"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.notification_templates
    #   when: controller_notifications | length is not match('0')

    # - name: "Include task for managing job templates"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.job_templates
    #   when: controller_templates | length is not match('0')

    # - name: "Include task for managing workflow templates"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.workflow_job_templates
    #   when: controller_workflows | length is not match('0')

    # - name: "Include task for managing schedules"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.schedules
    #   when: controller_schedules | length is not match('0')

    # - name: "Include task for managing roles"
    #   ansible.builtin.include_role:
    #     name: infra.controller_configuration.roles
    #   when: controller_roles | length is not match('0')
...

